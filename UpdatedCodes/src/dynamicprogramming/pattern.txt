1. Minimum (Maximum) Path to reach a target
1.1 Statement
Given a target find minimum (maximum) cost / path / sum to reach the target

1.2 Approach
Choose minimum (maximum) path among all possible paths before the current state, then add value for the current state
routes[i] = min(routes[i-1], routes[i-2],..., routes[i-k]) + cost[i]
Generate optimal solutions for all values in the target and return the value for the target

a. Top-Down
for (int j = 0; j < ways.size(); ++j) {
    result = min(result, topDown(target - ways[j]) + cost / path / sum;
}

return memo[/*state parameters*/] = result

b. Bottom-Up
for (int i = 1; i <= target; ++i) {
    for (int j = 0; j < ways.size(); ++j) {
        if (ways[j] < i) {
            dp[i] = min(dp[i], dp[i - ways[j]] + cost / path / sum);
        }
    }
}

return dp[target]


2. Distinct ways.
2.1 Statement
Given a target find a number of distinct ways to reach the target.

2.2 Approach
Sum all possible ways to reach the current state
routes[i] = routes[i - 1] + routes[i - 2] + ...
a. Top-Down
for (int j = 0; j < ways.size(); j++) {
    result += topDown(target - ways[j])
}
return memo[/*state parameters*/] = result

b. Bottom-Up
for (int i = 1; i <= target; ++i) {
   for (int j = 0; j < ways.size(); ++j) {
       if (ways[j] <= i) {
           dp[i] += dp[i - ways[j]];
       }
   }
}

return dp[target]
